{"version":3,"file":"static/js/1298.4c043716.chunk.js","mappings":"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","sources":["utils/validateUserSlippageTolerance.ts","components/Settings/MenuButton/index.tsx","components/Settings/RouterPreferenceSettings/index.tsx","components/Expand/index.tsx","components/Settings/TransactionDeadlineSettings/index.tsx","components/Settings/index.tsx","pages/AppBody.tsx"],"sourcesContent":["import { Percent } from '@uniswap/sdk-core'\n\nexport enum SlippageValidationResult {\n  TooLow,\n  TooHigh,\n  Valid,\n}\n\nexport const MINIMUM_RECOMMENDED_SLIPPAGE = new Percent(5, 10_000)\nexport const MAXIMUM_RECOMMENDED_SLIPPAGE = new Percent(1, 100)\n\nexport default function validateUserSlippageTolerance(userSlippageTolerance: Percent) {\n  if (userSlippageTolerance.lessThan(MINIMUM_RECOMMENDED_SLIPPAGE)) {\n    return SlippageValidationResult.TooLow\n  } else if (userSlippageTolerance.greaterThan(MAXIMUM_RECOMMENDED_SLIPPAGE)) {\n    return SlippageValidationResult.TooHigh\n  } else {\n    return SlippageValidationResult.Valid\n  }\n}\n","import { Settings } from 'components/Icons/Settings'\nimport Row from 'components/Row'\nimport { t, Trans } from 'i18n'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { isUniswapXTrade } from 'state/routing/utils'\nimport { useUserSlippageTolerance } from 'state/user/hooks'\nimport { SlippageTolerance } from 'state/user/types'\nimport styled from 'styled-components'\nimport { ThemedText } from 'theme/components'\nimport { useFormatter } from 'utils/formatNumbers'\nimport validateUserSlippageTolerance, { SlippageValidationResult } from 'utils/validateUserSlippageTolerance'\n\nconst Icon = styled(Settings)`\n  height: 24px;\n  width: 24px;\n  > * {\n    fill: ${({ theme }) => theme.neutral2};\n  }\n`\n\nconst Button = styled.button<{ isActive: boolean }>`\n  border: none;\n  background-color: transparent;\n  margin: 0;\n  padding: 0;\n  cursor: pointer;\n  outline: none;\n\n  :not([disabled]):hover {\n    opacity: 0.7;\n  }\n\n  ${({ isActive }) => isActive && `opacity: 0.7`}\n`\n\nconst IconContainer = styled(Row)`\n  padding: 6px 12px;\n  border-radius: 16px;\n`\n\nconst IconContainerWithSlippage = styled(IconContainer)<{ displayWarning?: boolean }>`\n  div {\n    color: ${({ theme, displayWarning }) => (displayWarning ? theme.deprecated_accentWarning : theme.neutral2)};\n  }\n\n  background-color: ${({ theme, displayWarning }) =>\n    displayWarning ? theme.deprecated_accentWarningSoft : theme.surface2};\n`\n\nconst ButtonContent = ({ trade, compact }: { trade?: InterfaceTrade; compact: boolean }) => {\n  const [userSlippageTolerance] = useUserSlippageTolerance()\n  const { formatPercent } = useFormatter()\n\n  if (userSlippageTolerance === SlippageTolerance.Auto || isUniswapXTrade(trade)) {\n    return (\n      <IconContainer>\n        <Icon />\n      </IconContainer>\n    )\n  }\n\n  const isInvalidSlippage = validateUserSlippageTolerance(userSlippageTolerance) !== SlippageValidationResult.Valid\n\n  return (\n    <IconContainerWithSlippage data-testid=\"settings-icon-with-slippage\" gap=\"sm\" displayWarning={isInvalidSlippage}>\n      <ThemedText.Caption>\n        {compact ? (\n          formatPercent(userSlippageTolerance)\n        ) : (\n          <Trans>{{ amt: formatPercent(userSlippageTolerance) }} slippage</Trans>\n        )}\n      </ThemedText.Caption>\n      <Icon />\n    </IconContainerWithSlippage>\n  )\n}\n\nexport default function MenuButton({\n  disabled,\n  onClick,\n  isActive,\n  compact,\n  trade,\n}: {\n  disabled: boolean\n  onClick: () => void\n  isActive: boolean\n  compact: boolean\n  trade?: InterfaceTrade\n}) {\n  return (\n    <Button\n      disabled={disabled}\n      onClick={onClick}\n      isActive={isActive}\n      id=\"open-settings-dialog-button\"\n      data-testid=\"open-settings-dialog-button\"\n      aria-label={t`Transaction Settings`}\n    >\n      <ButtonContent trade={trade} compact={compact} />\n    </Button>\n  )\n}\n","import Column from 'components/Column'\nimport UniswapXBrandMark from 'components/Logo/UniswapXBrandMark'\nimport { RowBetween, RowFixed } from 'components/Row'\nimport Toggle from 'components/Toggle'\nimport { Trans } from 'i18n'\nimport { RouterPreference } from 'state/routing/types'\nimport { useRouterPreference } from 'state/user/hooks'\nimport styled from 'styled-components'\nimport { ExternalLink, ThemedText } from 'theme/components'\n\nconst InlineLink = styled(ThemedText.BodySmall)`\n  color: ${({ theme }) => theme.accent1};\n  display: inline;\n  cursor: pointer;\n  &:hover {\n    opacity: 0.8;\n  }\n`\n\nexport default function RouterPreferenceSettings() {\n  const [routerPreference, setRouterPreference] = useRouterPreference()\n\n  return (\n    <RowBetween gap=\"sm\">\n      <RowFixed>\n        <Column gap=\"xs\">\n          <ThemedText.BodySecondary>\n            <UniswapXBrandMark />\n          </ThemedText.BodySecondary>\n          <ThemedText.BodySmall color=\"neutral2\">\n            <Trans>When available, aggregates liquidity sources for better prices and gas free swaps.</Trans>{' '}\n            <ExternalLink href=\"https://support.uniswap.org/hc/en-us/articles/17515415311501\">\n              <InlineLink>Learn more</InlineLink>\n            </ExternalLink>\n          </ThemedText.BodySmall>\n        </Column>\n      </RowFixed>\n      <Toggle\n        id=\"toggle-uniswap-x-button\"\n        isActive={routerPreference === RouterPreference.X}\n        toggle={() => {\n          setRouterPreference(routerPreference === RouterPreference.X ? RouterPreference.API : RouterPreference.X)\n        }}\n      />\n    </RowBetween>\n  )\n}\n","import AnimatedDropdown from 'components/AnimatedDropdown'\nimport Column from 'components/Column'\nimport { PropsWithChildren, ReactElement } from 'react'\nimport { ChevronDown } from 'react-feather'\nimport styled from 'styled-components'\n\nimport Row, { RowBetween } from '../Row'\n\nconst ButtonContainer = styled(Row)`\n  cursor: pointer;\n  justify-content: flex-end;\n  width: unset;\n`\n\nconst ExpandIcon = styled(ChevronDown)<{ $isOpen: boolean }>`\n  color: ${({ theme }) => theme.neutral2};\n  transform: ${({ $isOpen }) => ($isOpen ? 'rotate(180deg)' : 'rotate(0deg)')};\n  transition: transform ${({ theme }) => theme.transition.duration.medium};\n`\n\nconst Content = styled(Column)`\n  padding-top: ${({ theme }) => theme.grids.md};\n`\n\nconst Wrapper = styled(Column)<{ $padding?: string }>`\n  padding: ${({ $padding }) => $padding};\n`\n\nexport default function Expand({\n  header,\n  button,\n  children,\n  testId,\n  isOpen,\n  padding,\n  onToggle,\n}: PropsWithChildren<{\n  header: ReactElement\n  button: ReactElement\n  testId?: string\n  isOpen: boolean\n  padding?: string\n  onToggle: () => void\n}>) {\n  return (\n    <Wrapper $padding={padding}>\n      <RowBetween>\n        {header}\n        <ButtonContainer data-testid={testId} onClick={onToggle} aria-expanded={isOpen}>\n          {button}\n          <ExpandIcon $isOpen={isOpen} />\n        </ButtonContainer>\n      </RowBetween>\n      <AnimatedDropdown open={isOpen}>\n        <Content gap=\"md\">{children}</Content>\n      </AnimatedDropdown>\n    </Wrapper>\n  )\n}\n","import Expand from 'components/Expand'\nimport QuestionHelper from 'components/QuestionHelper'\nimport Row from 'components/Row'\nimport { Input, InputContainer } from 'components/Settings/Input'\nimport { DEFAULT_DEADLINE_FROM_NOW } from 'constants/misc'\nimport { Trans } from 'i18n'\nimport ms from 'ms'\nimport { useState } from 'react'\nimport { useUserTransactionTTL } from 'state/user/hooks'\nimport { ThemedText } from 'theme/components'\n\nenum DeadlineError {\n  InvalidInput = 'InvalidInput',\n}\n\nconst THREE_DAYS_IN_SECONDS = ms(`3d`) / 1000\nconst NUMBERS_ONLY = /^[0-9\\b]+$/\n\nexport default function TransactionDeadlineSettings() {\n  const [deadline, setDeadline] = useUserTransactionTTL()\n\n  const defaultInputValue = deadline && deadline !== DEFAULT_DEADLINE_FROM_NOW ? (deadline / 60).toString() : ''\n\n  // If user has previously entered a custom deadline, we want to show that value in the input field\n  // instead of a placeholder by defualt\n  const [deadlineInput, setDeadlineInput] = useState(defaultInputValue)\n  const [deadlineError, setDeadlineError] = useState<DeadlineError | false>(false)\n\n  // If user has previously entered a custom deadline, we want to show the settings expanded by default.\n  const [isOpen, setIsOpen] = useState(defaultInputValue.length > 0)\n\n  function parseCustomDeadline(value: string) {\n    // Do not allow non-numerical characters in the input field\n    if (value.length > 0 && !NUMBERS_ONLY.test(value)) {\n      return\n    }\n\n    setDeadlineInput(value)\n    setDeadlineError(false)\n\n    // If the input is empty, set the deadline to the default\n    if (value.length === 0) {\n      setDeadline(DEFAULT_DEADLINE_FROM_NOW)\n      return\n    }\n\n    // Parse user input and set the deadline if valid, error otherwise\n    try {\n      const parsed: number = Number.parseInt(value) * 60\n      if (parsed === 0 || parsed > THREE_DAYS_IN_SECONDS) {\n        setDeadlineError(DeadlineError.InvalidInput)\n      } else {\n        setDeadline(parsed)\n      }\n    } catch (error) {\n      setDeadlineError(DeadlineError.InvalidInput)\n    }\n  }\n\n  return (\n    <Expand\n      isOpen={isOpen}\n      onToggle={() => setIsOpen(!isOpen)}\n      padding=\"6px 0px\"\n      testId=\"transaction-deadline-settings\"\n      header={\n        <Row width=\"auto\">\n          <ThemedText.BodyPrimary>\n            <Trans>Transaction deadline</Trans>\n          </ThemedText.BodyPrimary>\n          <QuestionHelper\n            text={<Trans>Your transaction will revert if it is pending for more than this period of time.</Trans>}\n          />\n        </Row>\n      }\n      button={<Trans>{{ time: deadline / 60 }}m</Trans>}\n    >\n      <Row>\n        <InputContainer gap=\"md\" error={!!deadlineError}>\n          <Input\n            data-testid=\"deadline-input\"\n            placeholder={(DEFAULT_DEADLINE_FROM_NOW / 60).toString()}\n            value={deadlineInput}\n            onChange={(e) => parseCustomDeadline(e.target.value)}\n            onBlur={() => {\n              // When the input field is blurred, reset the input field to the current deadline\n              setDeadlineInput(defaultInputValue)\n              setDeadlineError(false)\n            }}\n          />\n          <ThemedText.BodyPrimary>\n            <Trans>minutes</Trans>\n          </ThemedText.BodyPrimary>\n        </InputContainer>\n      </Row>\n    </Expand>\n  )\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport { Scrim } from 'components/AccountDrawer'\nimport AnimatedDropdown from 'components/AnimatedDropdown'\nimport Column, { AutoColumn } from 'components/Column'\nimport Row from 'components/Row'\nimport MultipleRoutingOptions from 'components/Settings/MultipleRoutingOptions'\nimport { isUniswapXSupportedChain, L2_CHAIN_IDS, useIsSupportedChainId } from 'constants/chains'\nimport { useIsMobile } from 'hooks/screenSize'\nimport useDisableScrolling from 'hooks/useDisableScrolling'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport { Trans } from 'i18n'\nimport { Portal } from 'nft/components/common/Portal'\nimport { useCallback, useMemo, useRef } from 'react'\nimport { X } from 'react-feather'\nimport { useCloseModal, useModalIsOpen, useToggleSettingsMenu } from 'state/application/hooks'\nimport { ApplicationModal } from 'state/application/reducer'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { isUniswapXTrade } from 'state/routing/utils'\nimport styled from 'styled-components'\nimport { Divider, ThemedText } from 'theme/components'\nimport { Z_INDEX } from 'theme/zIndex'\nimport { FeatureFlags } from 'uniswap/src/features/gating/flags'\nimport { useFeatureFlag } from 'uniswap/src/features/gating/hooks'\nimport { useChainId } from 'wagmi'\n\nimport MaxSlippageSettings from './MaxSlippageSettings'\nimport MenuButton from './MenuButton'\nimport RouterPreferenceSettings from './RouterPreferenceSettings'\nimport TransactionDeadlineSettings from './TransactionDeadlineSettings'\n\nconst CloseButton = styled.button`\n  background: transparent;\n  border: none;\n  color: ${({ theme }) => theme.neutral1};\n  cursor: pointer;\n  height: 24px;\n  padding: 0;\n  width: 24px;\n`\n\nconst Menu = styled.div`\n  position: relative;\n`\n\nconst MenuFlyout = styled(AutoColumn)`\n  min-width: 20.125rem;\n  background-color: ${({ theme }) => theme.surface1};\n  border: 1px solid ${({ theme }) => theme.surface3};\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.01), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\n    0px 24px 32px rgba(0, 0, 0, 0.01);\n  border-radius: 12px;\n  position: absolute;\n  top: 100%;\n  margin-top: 10px;\n  right: 0;\n  z-index: 100;\n  color: ${({ theme }) => theme.neutral1};\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToMedium`\n    min-width: 18.125rem;\n  `};\n  user-select: none;\n  padding: 16px;\n`\n\nconst ExpandColumn = styled(AutoColumn)<{ $padTop: boolean }>`\n  gap: 8px;\n  padding-top: ${({ $padTop }) => ($padTop ? '16px' : '0')};\n`\n\nconst MobileMenuContainer = styled(Row)`\n  overflow: visible;\n  position: fixed;\n  height: 100%;\n  top: 100vh;\n  left: 0;\n  right: 0;\n  width: 100%;\n  z-index: ${Z_INDEX.fixed};\n`\n\nconst MobileMenuWrapper = styled(Column)<{ $open: boolean }>`\n  height: min-content;\n  width: 100%;\n  padding: 8px 16px 24px;\n  background-color: ${({ theme }) => theme.surface1};\n  overflow: hidden;\n  position: absolute;\n  bottom: ${({ $open }) => ($open ? `100vh` : 0)};\n  transition: bottom ${({ theme }) => theme.transition.duration.medium};\n  border: ${({ theme }) => `1px solid ${theme.surface3}`};\n  border-radius: 12px;\n  border-bottom-right-radius: 0px;\n  border-bottom-left-radius: 0px;\n  font-size: 16px;\n  box-shadow: unset;\n  z-index: ${Z_INDEX.modal};\n`\n\nconst MobileMenuHeader = styled(Row)`\n  margin-bottom: 16px;\n`\n\nconst StyledDivider = styled(Divider)`\n  margin: 16px 0px;\n`\n\nexport default function SettingsTab({\n  autoSlippage,\n  chainId,\n  trade,\n  compact = false,\n  hideRoutingSettings = false,\n}: {\n  autoSlippage: Percent\n  chainId?: number\n  trade?: InterfaceTrade\n  compact?: boolean\n  hideRoutingSettings?: boolean\n}) {\n  const connectedChainId = useChainId()\n  const showDeadlineSettings = Boolean(chainId && !L2_CHAIN_IDS.includes(chainId))\n  const node = useRef<HTMLDivElement | null>(null)\n  const isOpen = useModalIsOpen(ApplicationModal.SETTINGS)\n\n  const closeModal = useCloseModal()\n  const closeMenu = useCallback(() => closeModal(ApplicationModal.SETTINGS), [closeModal])\n  const toggleMenu = useToggleSettingsMenu()\n\n  const isMobile = useIsMobile()\n  const isOpenMobile = isOpen && isMobile\n  const isOpenDesktop = isOpen && !isMobile\n\n  useOnClickOutside(node, isOpenDesktop ? closeMenu : undefined)\n  useDisableScrolling(isOpen)\n\n  const multipleRoutingOptionsEnabled = useFeatureFlag(FeatureFlags.MultipleRoutingOptions)\n  const uniswapXEnabled = chainId && isUniswapXSupportedChain(chainId)\n  const showRoutingSettings = Boolean(uniswapXEnabled && !hideRoutingSettings && !multipleRoutingOptionsEnabled)\n\n  const isChainSupported = useIsSupportedChainId(chainId)\n  const Settings = useMemo(\n    () => (\n      <>\n        {showRoutingSettings && (\n          <AutoColumn gap=\"16px\">\n            <RouterPreferenceSettings />\n          </AutoColumn>\n        )}\n        <AnimatedDropdown open={!isUniswapXTrade(trade)}>\n          <ExpandColumn $padTop={showRoutingSettings}>\n            {showRoutingSettings && <Divider />}\n            <MaxSlippageSettings autoSlippage={autoSlippage} />\n            {showDeadlineSettings && <TransactionDeadlineSettings />}\n          </ExpandColumn>\n        </AnimatedDropdown>\n        {multipleRoutingOptionsEnabled && (\n          <>\n            {!isUniswapXTrade(trade) && <StyledDivider />}\n            <MultipleRoutingOptions />\n          </>\n        )}\n      </>\n    ),\n    [autoSlippage, multipleRoutingOptionsEnabled, showDeadlineSettings, showRoutingSettings, trade]\n  )\n\n  return (\n    <Menu ref={node}>\n      <MenuButton\n        disabled={!isChainSupported || chainId !== connectedChainId}\n        isActive={isOpen}\n        compact={compact}\n        onClick={toggleMenu}\n        trade={trade}\n      />\n      {isOpenDesktop && <MenuFlyout>{Settings}</MenuFlyout>}\n      {isOpenMobile && (\n        <Portal>\n          <MobileMenuContainer data-testid=\"mobile-settings-menu\">\n            <Scrim onClick={closeMenu} $open />\n            <MobileMenuWrapper $open>\n              <MobileMenuHeader padding=\"8px 0px 4px\">\n                <CloseButton data-testid=\"mobile-settings-close\" onClick={closeMenu}>\n                  <X size={24} />\n                </CloseButton>\n                <Row padding=\"0px 24px 0px 0px\" justify=\"center\">\n                  <ThemedText.SubHeader>\n                    <Trans>Settings</Trans>\n                  </ThemedText.SubHeader>\n                </Row>\n              </MobileMenuHeader>\n              {Settings}\n            </MobileMenuWrapper>\n          </MobileMenuContainer>\n        </Portal>\n      )}\n    </Menu>\n  )\n}\n","import { PropsWithChildren } from 'react'\nimport styled from 'styled-components'\nimport { Z_INDEX } from 'theme/zIndex'\n\ninterface BodyWrapperProps {\n  $margin?: string\n  $maxWidth?: string\n}\n\nexport const BodyWrapper = styled.main<BodyWrapperProps>`\n  position: relative;\n  margin-top: ${({ $margin }) => $margin ?? '0px'};\n  max-width: ${({ $maxWidth }) => $maxWidth ?? '420px'};\n  width: 100%;\n  background: ${({ theme }) => theme.surface1};\n  border-radius: 16px;\n  border: 1px solid ${({ theme }) => theme.surface3};\n  margin-top: 1rem;\n  margin-left: auto;\n  margin-right: auto;\n  z-index: ${Z_INDEX.default};\n`\n\n/**\n * The styled container element that wraps the content of most pages and the tabs.\n */\nexport default function AppBody(props: PropsWithChildren<BodyWrapperProps>) {\n  return <BodyWrapper {...props} />\n}\n"],"names":["SlippageValidationResult","TooLow","TooHigh","Valid","MINIMUM_RECOMMENDED_SLIPPAGE","Percent","MAXIMUM_RECOMMENDED_SLIPPAGE","Icon","styled","Settings","theme","neutral2","Button","button","isActive","IconContainer","Row","IconContainerWithSlippage","displayWarning","deprecated_accentWarning","deprecated_accentWarningSoft","surface2","ButtonContent","trade","compact","userSlippageTolerance","useUserSlippageTolerance","formatPercent","useFormatter","SlippageTolerance","Auto","isUniswapXTrade","isInvalidSlippage","lessThan","greaterThan","validateUserSlippageTolerance","data-testid","gap","ThemedText","Caption","Trans","amt","MenuButton","disabled","onClick","id","aria-label","t","InlineLink","BodySmall","accent1","RouterPreferenceSettings","routerPreference","setRouterPreference","useRouterPreference","RowBetween","RowFixed","Column","BodySecondary","UniswapXBrandMark","color","ExternalLink","href","Toggle","RouterPreference","X","toggle","API","ButtonContainer","ExpandIcon","ChevronDown","$isOpen","transition","duration","medium","Content","grids","md","Wrapper","$padding","Expand","header","children","testId","isOpen","padding","onToggle","aria-expanded","AnimatedDropdown","open","DeadlineError","InvalidInput","THREE_DAYS_IN_SECONDS","ms","NUMBERS_ONLY","TransactionDeadlineSettings","deadline","setDeadline","useUserTransactionTTL","defaultInputValue","DEFAULT_DEADLINE_FROM_NOW","toString","deadlineInput","setDeadlineInput","useState","deadlineError","setDeadlineError","setIsOpen","length","width","BodyPrimary","QuestionHelper","text","time","InputContainer","error","Input","placeholder","value","onChange","e","test","parsed","Number","parseInt","parseCustomDeadline","target","onBlur","CloseButton","neutral1","Menu","div","MenuFlyout","AutoColumn","surface1","surface3","deprecated_mediaWidth","deprecated_upToMedium","ExpandColumn","$padTop","MobileMenuContainer","Z_INDEX","fixed","MobileMenuWrapper","$open","modal","MobileMenuHeader","StyledDivider","Divider","SettingsTab","autoSlippage","chainId","hideRoutingSettings","connectedChainId","useChainId","showDeadlineSettings","Boolean","L2_CHAIN_IDS","includes","node","useRef","useModalIsOpen","ApplicationModal","SETTINGS","closeModal","useCloseModal","closeMenu","useCallback","toggleMenu","useToggleSettingsMenu","isMobile","useIsMobile","isOpenMobile","isOpenDesktop","useOnClickOutside","undefined","useDisableScrolling","multipleRoutingOptionsEnabled","useFeatureFlag","FeatureFlags","MultipleRoutingOptions","uniswapXEnabled","isUniswapXSupportedChain","showRoutingSettings","isChainSupported","useIsSupportedChainId","useMemo","MaxSlippageSettings","ref","Portal","Scrim","size","justify","SubHeader","BodyWrapper","main","$margin","$maxWidth","default","AppBody","props"],"sourceRoot":""}